#initializing data
finch_data = read_csv("zebrafinches.csv")
further_data = finch_data$further
skew_further = skewness(further_data)
n=nrow(finch_data)
#Calculating t statistic
t_val = mean(further_data)/(sd(further_data)/sqrt(n))
#Caculating potential error
potential_err = (skew_further/sqrt(n))*((2*t_val^2+1)/6)*dnorm(t_val)
#################
#  PART B
#################
#Initializing
t_vals = seq(from = -10, to = 10, by = 0.01)
R = length(t_vals)
err_tibble = tibble(err=rep(NA,R))
#Looping over each t value
for (i in 1:R){
t_val = t_vals[i]
#Calculating potential error
potential_err = (skew_further/sqrt(n))*((2*t_val^2+1)/6)*dnorm(t_val)
#Adding error to tibble
err_tibble$err[i] = potential_err
}
#view(err_tibble)
#Making plot of values
error_plot = ggplot(data=err_tibble, aes(t_vals, err)) +
geom_line() +
theme_bw() +
geom_hline(yintercept = 0) +
xlab("T Value") +
ylab("Potential Error")
#################
#  PART C
#################
alpha = 0.05
n = ((skew_further/(6*0.1*alpha))* (2*t_val^2+1)*dnorm(t_val))^2
error_plot
n
alpha = 0.05
t_val = mean(further_data)/(sd(further_data)/sqrt(n))
n = ((skew_further/(6*0.1*alpha))* (2*t_val^2+1)*dnorm(t_val))^2
n
t_val = qnorm(0.05)
#################
alpha = 0.05
t_val = qnorm(0.05)
n = ((skew_further/(6*0.1*alpha))* (2*t_val^2+1)*dnorm(t_val))^2
alpha = 0.05
t_val = qnorm(alpha)
n = ((skew_further/(6*0.1*alpha))* (2*t_val^2+1)*dnorm(t_val))^2
n
R <- 1000
mu0.iterate <- 0.01
starting.point <- mean(further_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
c(mu.lower, mu.upper)
mean(further_data)
R <- 10000
mu0.iterate <- 0.001
starting.point <- mean(further_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
c(mu.lower, mu.upper)
###################
#    CLOSER
###################
starting.point <- mean(closer_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(closer_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(closer_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
closer_ci = c(mu.lower, mu.upper)
closer_ci
#################
#  PART C
#################
R <- 1000
mu0.iterate <- 0.001
starting.point <- mean(further_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(further_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
further_ci = c(mu.lower, mu.upper)
further_ci
closer_ci
###################
#    CLOSER
###################
starting.point <- mean(closer_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(closer_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(closer_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
closer_ci = c(mu.lower, mu.upper)
closer_ci
###################
#    DIFFERENCE
###################
starting.point <- mean(diff_data)
#Calculating lower value
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- diff_data - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
(delta <- abs(mean(diff_data) - mu.lower))
(low <- mu.lower - delta) # mirror
(high<- mu.lower + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
#Calculating upper value
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- diff_data - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
(delta <- abs(mean(diff_data) - mu.upper))
(low <- mu.upper - delta) # mirror
(high<- mu.upper + delta)   # xbar
(p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high))
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
diff_ci = c(mu.lower, mu.upper)
diff_ci
library(boot)
closer_ci
nrow(further_data)
length(further_data)
R <- 10000
resamples <- tibble(further = rep(NA, R),
closer = rep(NA, R),
diff = rep(NA, R))
for(i in 1:R){
#Making a sample for further
curr.resample <- sample(further_data,
size = length(further_data),
replace = T)
resamples$further[i] <- mean(curr.resample)
#Making a sample for closer
curr.resample <- sample(closer_data,
size = length(closer_data),
replace = T)
resamples$closer[i] <- mean(curr.resample)
#Making a sample for difference
curr.resample <- sample(diff_data,
size = length(diff_data),
replace = T)
resamples$diff[i] <- mean(curr.resample)
}
#################
#  PART D
#################
# Confidence Interval
resample_further_ci = quantile(resamples$further, c(0.025, 0.975))
resample_closer_ci = quantile(resamples$closer, c(0.025, 0.975))
resample_diff_ci = quantile(resamples$diff, c(0.025, 0.975))
resample_further_ci
resample_closer_ci
resample_diff_ci
n
####################################
#####       QUESTION 2        ######
####################################
#################
#  PART A
#################
R <- 10000
resamples <- tibble(further = rep(NA, R),
closer = rep(NA, R),
diff = rep(NA, R))
for(i in 1:R){
#Making a sample for further
curr.resample <- sample(further_data,
size = length(further_data),
replace = T)
resamples$further[i] <- mean(curr.resample)/(sd(further_data)/sqrt(length(further_data)))
#Making a sample for closer
curr.resample <- sample(closer_data,
size = length(closer_data),
replace = T)
resamples$closer[i] <- mean(curr.resample)/(sd(closer_data)/sqrt(length(closer_data)))
#Making a sample for difference
curr.resample <- sample(diff_data,
size = length(diff_data),
replace = T)
resamples$diff[i] <- mean(curr.resample)/(sd(diff_data)/sqrt(length(diff_data)))
}
#################
#  PART B
#################
#################
#  PART D
#################
# Confidence Interval
resample_further_ci = quantile(resamples$further, c(0.025, 0.975))
resample_closer_ci = quantile(resamples$closer, c(0.025, 0.975))
resample_diff_ci = quantile(resamples$diff, c(0.025, 0.975))
resample_further_ci
resample_closer_ci
resample_diff_ci
